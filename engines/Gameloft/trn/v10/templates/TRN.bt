//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: TRN.bt
//   Authors: lOlbas
//   Version: 1.0
//   Purpose: TRN Format v10
//  Category: 
// File Mask: *.trn
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint FORMAT_VERSION = 10;

local uint dimension = 64;
local uint vertex_line = dimension + 1;

string ConvertColor(short color) {
    int color_i = ((color & 0xF800) << 8) | ((color & 0x07E0) << 5) | ((color & 0x001F) << 3);
    int red = (color_i & 0x00FF0000) >> 16;
    int green = (color_i & 0x0000FF00) >> 8;
    int blue = (color_i & 0x000000FF);
    string color_s;
    SPrintf(color_s, "RGB(%d, %d, %d)", red, green, blue);
    return color_s;
}

string Normalize(byte normal) {
    string normal_s;
    SPrintf(normal_s, "%f", (float)normal / 127);
    return normal_s;
}

struct TRNHeader
{
    uchar signature[4] <bgcolor=0x00FF00, name="Signature">;
    uint version <bgcolor=0x00FF00, name="Format Version">;
    Assert(version == FORMAT_VERSION, "Wrong format version!");
    int grid_x <bgcolor=0x00FF00, name="Grid X">;
    int grid_y <bgcolor=0x00FF00, name="Grid Y">;
    uint64 unknown <bgcolor=0x0000FF, name="Unknown", comment=WarnIfNotOne>;
};

struct TRNChunk
{
    ushort unknown_value <bgcolor=0x0000FF, name="Unknown Value">;
    ushort unknown_value <bgcolor=0x0055CC, name="Unknown Value">;
    hfloat unknown_value <bgcolor=0x0055FF, name="Unknown Value">;
    short unknown_value <bgcolor=0x0099FF, name="Unknown Value">;
    short unknown_value <bgcolor=0x0000FF, name="Unknown Value">;
    short unknown_value <bgcolor=0x0000FF, name="Unknown Value">;
    short unknown_value <bgcolor=0x0000FF, name="Unknown Value">;
    short unknown_value <bgcolor=0x0000FF, name="Unknown Value">;
    hfloat unknown_value <bgcolor=0x0000FF, name="Unknown Value">;
    short unknown_value <bgcolor=0x0000FF, name="Unknown Value">;
    ushort unknown_value <bgcolor=0x0000FF, name="Unknown Value">;
    hfloat unknown_value <bgcolor=0x00FFFF, name="Water Level">;
};

struct TRNChunks
{
    
    local uint i;
    for (i = 0; i < dimension; i++) {
        TRNChunk chunk <name="Chunk">;
    }
};

struct TRNHeightMap
{
    local uint y, x;
    for (y = 0; y < vertex_line; y++) {
        for (x = 0; x < vertex_line; x++) {
            short vertex_height <bgcolor=0x00FF00, name="Vertex Height">;
        }
    }
};

struct TRNColors
{
    local uint i;
    for (i = 0; i < vertex_line * vertex_line; i++) {
        short color <bgcolor=0x00FF00, name="Vertex Color", comment=ConvertColor>;
    }
};

struct TRNNormals
{
    local uint i;
    for (i = 0; i < vertex_line * vertex_line; i++) {
        byte normal_x <bgcolor=0x00FF00, name="Normal X", comment=Normalize>;
        byte normal_y <bgcolor=0x00FF00, name="Normal Y", comment=Normalize>;
        byte normal_z <bgcolor=0x00FF00, name="Normal Z", comment=Normalize>;
    }
};

struct TRNString
{
    char model_path[strings.lengths[strings.i]] <bgcolor=0x00FF00>;
};

struct TRNStrings
{
    uint count <bgcolor=0x00FF00, name="Strings Count">;
    
    local uint i;
    local uint pos_prev = 0;
    local uint lengths[count];
    
    for (i = 0; i < count; i++) {
        uint offset <bgcolor=0x00FF00, name="String Length">;
        lengths[i] = offset - pos_prev;
        pos_prev = offset;
    }
    
    for (i = 0; i < count; i++) {
        TRNString texture_path <name="Texture Path">;
    }
};

struct TRNFile
{
    TRNHeader header <name="Header">;
    TRNChunks chunks <name="Tile Chunks">;
    TRNHeightMap height_map <name="Height Map">;
    TRNColors colors <name="Vertex Colors">;
    TRNNormals normals <name="Vertex Normals">;
    byte padding <bgcolor=0xFFBB00, name="Padding">;
    TRNStrings strings <name="Strings">;
} file <name="TRN v10">;